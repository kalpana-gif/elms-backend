generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  phone     String
  address   String
  role      String
  password  String
  createdAt DateTime @default(now())

  guardianMappings GuardianMapping[] @relation("Guardian")
  studentMappings  GuardianMapping[] @relation("Student")

  subjects StudentSubject[] @relation("StudentSubjects")

  // New relations for Classroom
  classroomsTeaching Classroom[]        @relation("ClassTeacher")
  classesEnrolled    ClassroomStudent[] @relation("StudentInClass")

  // New relations for Mark
  marksGiven    Mark[] @relation("MarksByTeacher")
  marksReceived Mark[] @relation("MarksByStudent")

  // New relation for Notification
  notificationsCreated Notification[] @relation("NotificationCreatedBy")
}

model GuardianMapping {
  id         String   @id @default(uuid())
  studentId  String   @unique
  guardianId String
  batchYear  Int
  createdAt  DateTime @default(now())

  student  User @relation("Student", fields: [studentId], references: [id])
  guardian User @relation("Guardian", fields: [guardianId], references: [id])
}

model Subject {
  id       String           @id @default(uuid())
  name     String           @unique
  code     String           @unique
  students StudentSubject[] @relation("StudentSubjects")
  Mark     Mark[]
}

model StudentSubject {
  id        String @id @default(uuid())
  studentId String
  subjectId String

  student User    @relation("StudentSubjects", fields: [studentId], references: [id])
  subject Subject @relation("StudentSubjects", fields: [subjectId], references: [id])
}

model Classroom {
  id        String   @id @default(uuid())
  name      String
  teacherId String
  batchYear Int
  createdAt DateTime @default(now())

  teacher  User               @relation("ClassTeacher", fields: [teacherId], references: [id])
  students ClassroomStudent[] @relation("ClassroomStudents")
  Mark     Mark[]
  Exam     Exam[]
}

model ClassroomStudent {
  id          String @id @default(uuid())
  classroomId String
  studentId   String

  classroom Classroom @relation("ClassroomStudents", fields: [classroomId], references: [id])
  student   User      @relation("StudentInClass", fields: [studentId], references: [id])
}

model Mark {
  id          String   @id @default(uuid())
  studentId   String
  subjectId   String
  teacherId   String
  classroomId String?
  batchYear   Int?
  marks       Float
  examType    String
  createdAt   DateTime @default(now())

  student   User       @relation("MarksByStudent", fields: [studentId], references: [id])
  subject   Subject    @relation(fields: [subjectId], references: [id])
  teacher   User       @relation("MarksByTeacher", fields: [teacherId], references: [id])
  classroom Classroom? @relation(fields: [classroomId], references: [id])

  @@unique([studentId, subjectId, teacherId, examType, classroomId])
}

model Notification {
  id          String   @id @default(uuid())
  title       String
  message     String
  targetRole  String
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy User @relation("NotificationCreatedBy", fields: [createdById], references: [id])
}

model Exam {
  id          String   @id @default(uuid())
  title       String
  classroomId String
  date        DateTime
  description String?
  fileData    Bytes? // File as BLOB
  fileName    String?
  fileType    String?
  createdAt   DateTime @default(now())

  classroom Classroom @relation(fields: [classroomId], references: [id])
}
